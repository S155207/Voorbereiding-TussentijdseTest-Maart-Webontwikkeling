"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logAsync = exports.log = void 0;
const sleepSync = (ms) => {
    const end = new Date().getTime() + ms;
    while (new Date().getTime() < end) {
        /* do nothing */
    }
};
const log = (str, { speed = 1000, maxWordsAtOnce = 1 } = {}) => {
    let tokens = str.split(' ');
    let idx = 0;
    maxWordsAtOnce = Math.min(maxWordsAtOnce, tokens.length);
    while (idx < tokens.length) {
        sleepSync(speed);
        let randomIndex = idx + Math.ceil(Math.random() * maxWordsAtOnce);
        for (let i = idx; i < Math.min(randomIndex, tokens.length); i++) {
            process.stdout.write(tokens[idx] + ' ');
            idx++;
        }
    }
    process.stdout.write('\n');
};
exports.log = log;
const logAsync = (str, { speed = 1000, maxWordsAtOnce = 1 } = {}) => __awaiter(void 0, void 0, void 0, function* () {
    let tokens = str.split(' ');
    let idx = 0;
    maxWordsAtOnce = Math.min(maxWordsAtOnce, tokens.length);
    while (idx < tokens.length) {
        yield new Promise(resolve => setTimeout(resolve, speed));
        let randomIndex = idx + Math.ceil(Math.random() * maxWordsAtOnce);
        for (let i = idx; i < Math.min(randomIndex, tokens.length); i++) {
            process.stdout.write(tokens[idx] + ' ');
            idx++;
        }
    }
    process.stdout.write('\n');
});
exports.logAsync = logAsync;
